{"version":3,"sources":["components/Wrapper/index.js","components/Navbar.js","components/Jumbotron.js","components/Images/index.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Navbar","href","message","curScore","highScore","Jumbotron","Images","images","map","image","src","url","alt","id","key","onClick","handleImageClick","Footer","App","state","clicked","shuffleImages","sort","Math","random","_this$state","_this","i","length","console","log","handleGameEnd","setState","newHighScore","forEach","this","components_Navbar","components_Wrapper","components_Jumbotron","components_Images","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c440ae4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"container\">{props.children}</div>\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className=\"navbar navbar-default navbar-light bg-light navbar-fixed-top\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">Memory Game</a>\r\n                <div>{props.message}</div>\r\n                <div>Score: {props.curScore} | High Score: {props.highScore}</div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid text-center\">\r\n            <h1 className=\"display-4\">Memory Game</h1>\r\n            <hr className=\"my-4\" />\r\n            <p>Click on an image to earn points, but don't click the same image more than once!</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Images(props) {\r\n    return (\r\n        <div className=\"image-holder\">\r\n            {props.images.map(image => (\r\n                <img \r\n                    src={image.url}\r\n                    alt=\"Failed to load\"\r\n                    className=\"image-card\"\r\n                    id={image.id}\r\n                    key={image.id}\r\n                    onClick={() => props.handleImageClick(image.id)}>\r\n                </img>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Images;","import React from \"react\";\r\n\r\nfunction Footer(props) {\r\n    return <div className=\"\">{props.children}</div>\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper/\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Images from \"./components/Images/\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  // State which holds current score and high score\n  state = {\n    curScore: 0,\n    highScore: 0,\n    images: [\n      {\n        clicked: false,\n        id: 0,\n        url: \"https://via.placeholder.com/200/CD00FF/CD00FF\"\n      },\n      {\n        clicked: false,\n        id: 1,\n        url: \"https://via.placeholder.com/200/FF0000/FF0000\"\n      },\n      {\n        clicked: false,\n        id: 2,\n        url: \"https://via.placeholder.com/200/FFFF00/FFFF00\"\n      },\n      {\n        clicked: false,\n        id: 3,\n        url: \"https://via.placeholder.com/200/0000FF/0000FF\"\n      },\n      {\n        clicked: false,\n        id: 4,\n        url: \"https://via.placeholder.com/200/00FFFF/00FFFF\"\n      },\n      {\n        clicked: false,\n        id: 5,\n        url: \"https://via.placeholder.com/200/000000/000000\"\n      },\n      {\n        clicked: false,\n        id: 6,\n        url: \"https://via.placeholder.com/200/00FF1A/00FF1A\"\n      },\n      {\n        clicked: false,\n        id: 6,\n        url: \"https://via.placeholder.com/200/FF9A00/FF9A00\"\n      }\n    ],\n    message: \"Click an Image to Begin\"\n  };\n\n  shuffleImages = (images) => {\n    images.sort(() => Math.random() - 0.5);\n  }\n\n  handleGameEnd(curScore, highScore, images) {\n    let newHighScore = highScore;\n    if (curScore > highScore) {\n      newHighScore = curScore;\n    }\n    images.forEach(image => image.clicked = false);\n    this.setState({\n      curScore: 0,\n      highScore: newHighScore,\n      images: images,\n      message: \"You guessed incorrectly!\"\n    });\n  }\n\n  handleImageClick = (id) => {\n    let { curScore, highScore, images } = this.state;\n    for (let i = 0; i < images.length; i++) {\n      // find the correct image and check if it has been clicked\n      if (images[i].id === id) {\n        console.log(images[i]);\n        if (images[i].clicked) {\n          // if it has, the game ends\n          this.handleGameEnd(curScore, highScore, images);\n        } else {\n          // otherwise, set this images clicked property to true and update the score\n          images[i].clicked = true;\n          this.setState({\n            curScore: curScore + 1,\n            highScore: highScore,\n            images: images,\n            message: \"You guessed correctly!\"\n          });\n        }\n      }\n    }\n\n    // After figuring out right or wrong, shuffle images\n    this.shuffleImages(images);\n\n  }\n\n  render() {\n    return (\n      <body>\n        <Navbar\n          curScore={this.state.curScore}\n          highScore={this.state.highScore}\n          message={this.state.message} />\n        <Wrapper>\n          <Jumbotron />\n          <Images\n            handleImageClick={this.handleImageClick}\n            images={this.state.images} />\n          <Footer />\n        </Wrapper>\n      </body>\n    );\n  }\n  // return (\n  //   <div className=\"App\">\n  //     <header className=\"App-header\">\n  //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //       <p>\n  //         Edit <code>src/App.js</code> and save to reload.\n  //       </p>\n  //       <a\n  //         className=\"App-link\"\n  //         href=\"https://reactjs.org\"\n  //         target=\"_blank\"\n  //         rel=\"noopener noreferrer\"\n  //       >\n  //         Learn React\n  //       </a>\n  //     </header>\n  //   </div>\n  // );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}